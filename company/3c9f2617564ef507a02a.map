{"version":3,"sources":["/Users/mikeamara/projects/authapp/src/service/index.ts","/Users/mikeamara/projects/authapp/src/service/service.ts","/Users/mikeamara/projects/authapp/src/service/login.ts","/Users/mikeamara/projects/authapp/src/styles/flex.ts","/Users/mikeamara/projects/authapp/src/styles/colors.ts","/Users/mikeamara/projects/authapp/src/styles/buttons.ts","/Users/mikeamara/projects/authapp/src/styles/measurements.ts","/Users/mikeamara/projects/authapp/src/screens/login.tsx","/Users/mikeamara/projects/authapp/src/helpers/login.helpers.ts","/Users/mikeamara/projects/authapp/src/components/atoms/textComp.tsx","/Users/mikeamara/projects/authapp/src/components/atoms/buttonComp.tsx","/Users/mikeamara/projects/authapp/src/components/atoms/spinner.tsx","/Users/mikeamara/projects/authapp/src/components/header.tsx","/Users/mikeamara/projects/authapp/src/screens/dashboard.tsx","/Users/mikeamara/projects/authapp/src/screens/myAccount.tsx","/Users/mikeamara/projects/authapp/src/index.tsx","/Users/mikeamara/projects/authapp/App.tsx","/Users/mikeamara/projects/authapp/web-build/register-service-worker.js","/Users/mikeamara/projects/authapp/src/img/logo.png","/Users/mikeamara/projects/authapp/src/reducers/Login.ts","/Users/mikeamara/projects/authapp/src/reducers/deviceInfo.ts","/Users/mikeamara/projects/authapp/src/reducers/activePage.ts","/Users/mikeamara/projects/authapp/src/reducers/index.ts","/Users/mikeamara/projects/authapp/src/store/store.ts"],"names":["fetchUrl","fetchProps","a","async","url","method","headers","body","fetch","then","response","text","data","JSON","parse","catch","e","error","error_description","res","store","dispatch","type","payload","isLoggedIn","login","password","username","protocol","Authorization","Base64","btoa","align","colors","textColor","backgroundColor","center","flexStart","mainHeaderHeight","secondaryHeaderHeight","styles","StyleSheet","create","containerDiv","display","alignItems","justifyContent","flexDirection","paddingTop","logoDiv","marginBottom","logoImg","height","resizeMode","width","borderColor","borderWidth","padding","errorMsg","color","Login","props","onLogInSuccess","React","useState","onChangeUsername","onChangePassword","setErrorMsg","isLoading","setIsLoading","handleLogin","useCallback","loggedIn","useLogin","reduxLogin","View","style","Image","source","require","Text","TextInput","onChangeText","placeholder","value","secureTextEntry","ActivityIndicator","size","Button","title","onPress","navigationOptions","headerMode","headerVisible","headerStyle","connect","state","authReducer","screenWidth","Math","round","Dimensions","get","fontSize","TextComp","ref","customStyles","children","button","borderBottomColor","borderBottomWidth","activeButton","buttonText","margin","ButtonComp","active","TouchableOpacity","view","marginTop","marginRight","marginLeft","Spinner","textSize","textAlign","headerHeight","measurements","imageRow","deviceInfo","page","navigate","useScrollView","handleLogout","handlePagePressDashboard","reduxActivePage","handlePagePressMyaccount","handlePagePressSupport","handlePagePressNotes","handlePagePressTechsupport","scrollHeight","Platform","OS","screenHeight","minHeight","ScrollView","horizontal","snapToStart","showsHorizontalScrollIndicator","contentContainerStyle","flexGrow","Dashboard","navigation","loading","flexWrap","MyAccount","MainNavigator","createStackNavigator","screen","AppContainer","createAppContainer","activePage","reduxDeviceInfo","route","setRout","calcDeviceInfo","useEffect","addEventListener","flex","nav","NavigationActions","routeName","App","persistor","navigator","window","serviceWorker","register","scope","info","console","module","exports","initialState","action","deviceInfoReducer","activePageReducer","rootReducer","combineReducers","middleware","thunk","persistConfig","key","storage","AsyncStorage","whitelist","persistedReducer","persistReducer","createStore","applyMiddleware","persistStore"],"mappings":"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","file":"static/js/app.eccd8666.chunk.js","sourcesContent":["export * from \"./login\";\nexport * from \"./deviceInfo\";\nexport * from \"./activePage\";","// error: \"invalid_request\"\n// error_description: \"Invalid token\"\nimport { store } from '../store/store';\n\nexport interface Ifetch {\n    url: string;\n    method?: string;\n    headers?: { [S: string]: string };\n    body?: string;\n}\n\nexport const fetchUrl = async (fetchProps: Ifetch) => {\n    const { url, method = 'GET', headers, body } = fetchProps;\n    const res = await fetch(url, {\n        method,\n        headers,\n        body,\n    })\n        .then(response => {\n            return response.text();\n        })\n        .then(data => {\n            return data ? JSON.parse(data) : {};\n        })\n        .catch(e => {\n            return {\n                error: \"invalid_grant\",\n                error_description: e\n            };\n        });\n    if (res.error && res.error_description === \"Invalid token\") {\n        store.dispatch({\n            type: 'LOGGED_IN',\n            payload: { ...{}, isLoggedIn: false },\n        });\n        return false;\n    }\n    return res;\n}","import { Base64 } from 'js-base64';\nimport { protocol, domain, token } from './paths';\nimport { fetchUrl } from './service';\n\nexport interface IloginData {\n    password: string;\n    username: string;\n    grant_type?: string;\n}\n\nexport interface IloginDataOut {\n    access_token?: string;\n    expires_in?: number;\n    refresh_token?: string;\n    scope?: string;\n    token_type?: string;\n    error?: string;\n    error_description?: string;\n}\n\nexport interface Ilogin {\n    payload: IloginDataOut;\n    isLoggedIn: boolean;\n}\n\nexport const login = async (data: IloginData): Promise<IloginDataOut> => {\n    const { password, username } = data;\n    const url = `${protocol}://${domain}/internal/session/login`;\n    return await fetchUrl({\n        url,\n        method: 'POST',\n        headers: {\n            Authorization: `Basic ${Base64.btoa(`${username}:${password}`)}`,\n        },\n    });\n};\n","export enum align {\n    stretch = \"stretch\",\n    center = \"center\",\n    flexStart = \"flex-start\",\n    flexEnd = \"flex-end\",\n    baseline = \"baseline\"\n};","export const colors = {\n    black: \"#000000\",\n    white: \"#ffffff\",\n    red: \"#990000\",\n    extraDardGray: \"#222223\",\n    darkGray: \"#353637\",\n    gray: \"#4a4a4a\",\n    lightGray: \"#a9a9a9\",\n    lighterGray: \"#e6e6e6\",\n    lightestGray: \"#f0f0f0\",\n    gold: \"#9e7a1c\",\n    blue: \"#2172ba\",\n    defaults: {\n        textColor: '#222222',\n        backgroundColor: '#ffffff'\n    },\n    success: {\n        textColor: '#4f8a10',\n        backgroundColor: '#dff2bf'\n    },\n    warning: {\n        textColor: '#9f6000',\n        backgroundColor: '#feefb3'\n    },\n    error: {\n        textColor: '#d8000c',\n        backgroundColor: '#ffd2d2'\n    }\n}","import { colors } from \"./colors\";\nimport { align } from \"./flex\";\n\nexport const btn = {\n    link: {\n        backgroundColor: 'tranparent',\n        alignItems: align.center,\n        alignSelf: align.flexStart,\n    },\n    linkText: {\n        color: colors.blue\n    },\n    primary: {\n        backgroundColor: colors.red,\n        padding: 10,\n        borderRadius: 5,\n        alignItems: align.center,\n        alignSelf: align.flexStart,\n    },\n    primaryText: {\n        color: colors.white\n    },\n    secondary: {\n        borderRadius: 10,\n        backgroundColor: colors.gray,\n        alignItems: \"center\",\n        alignSelf: \"flex-start\"\n    }\n}","export const mainHeaderHeight = 55;\nexport const secondaryHeaderHeight = 50;","import React from 'react';\nimport { Button, View, StyleSheet, TextInput, Image, Text, ActivityIndicator } from 'react-native';\nimport { connect } from 'react-redux';\nimport { colors } from '../styles';\nimport { IloginDataOut, Ilogin } from '../service';\nimport { useLogin } from '../helpers/login.helpers';\n\ninterface Iprops {\n    reduxLogin: (login: Ilogin) => void;\n}\n\nconst styles = StyleSheet.create({\n    containerDiv: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        paddingTop: 50,\n    },\n    logoDiv: { marginBottom: 10 },\n    logoImg: { height: 80, resizeMode: 'contain', width: 120 },\n    username: { width: 200, height: 40, borderColor: 'gray', borderWidth: 1, padding: 5, marginBottom: 10 },\n    password: { width: 200, height: 40, borderColor: 'gray', borderWidth: 1, padding: 5, marginBottom: 10 },\n    errorMsg: { color: colors.error.textColor },\n});\n\nconst Login = (props: Iprops) => {\n    const { username, onChangeUsername, password, onChangePassword, errorMsg = '', isLoading, handleLogin } = useLogin(\n        (payload: IloginDataOut) => {\n            props.reduxLogin({ payload, isLoggedIn: true });\n        }\n    );\n\n    return (\n        <View style={styles.containerDiv}>\n            <View style={styles.logoDiv}>\n                <Image style={styles.logoImg} source={require('../img/logo.png')} />\n            </View>\n            <View>\n                <Text style={styles.errorMsg}>{errorMsg}</Text>\n            </View>\n            <View>\n                <TextInput\n                    style={styles.username}\n                    onChangeText={text => onChangeUsername(text)}\n                    placeholder=\"Username\"\n                    value={username}\n                />\n            </View>\n            <View>\n                <TextInput\n                    style={styles.password}\n                    onChangeText={text => onChangePassword(text)}\n                    placeholder=\"********\"\n                    value={password}\n                    secureTextEntry={true}\n                />\n            </View>\n            <View>\n                {!isLoading ? (\n                    <Button title=\"Login\" onPress={handleLogin} />\n                ) : (\n                    <ActivityIndicator size={'large'} color={colors.warning.textColor} />\n                )}\n            </View>\n        </View>\n    );\n};\n\nLogin.navigationOptions = {\n    headerMode: 'none',\n    navigationOptions: {\n        headerVisible: false,\n    },\n    headerStyle: { display: 'none' },\n};\n\nconst mapStateToProps = state => {\n    return {\n        loggedIn: state.authReducer.loggedIn,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        reduxLogin: (payload: Ilogin) =>\n            dispatch({\n                type: 'LOGGED_IN',\n                payload: payload,\n            }),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from \"react\";\nimport { login, IloginDataOut } from \"../service\";\n\nexport const useLogin = (onLogInSuccess: (loggedIn: IloginDataOut) => void) => {\n    const [username, onChangeUsername] = React.useState('');\n    const [password, onChangePassword] = React.useState('');\n    const [errorMsg, setErrorMsg] = React.useState('');\n    const [isLoading, setIsLoading] = React.useState(false);\n\n    const handleLogin = React.useCallback(async () => {\n        if (username && password) {\n            setIsLoading(true);\n            setErrorMsg('');\n            const loggedIn: IloginDataOut = await login({ username, password });\n            setIsLoading(false);\n            if (loggedIn && !loggedIn.error) {\n                onLogInSuccess(loggedIn);\n            }\n            else {\n                setErrorMsg(loggedIn.error_description || 'Incorrect username/password!');\n            }\n        }\n        else {\n            setErrorMsg('Incorrect username/password!');\n        }\n    }, [username, password]);\n\n    return {\n        username,\n        onChangeUsername,\n        password,\n        onChangePassword,\n        errorMsg,\n        setErrorMsg,\n        isLoading,\n        setIsLoading,\n        handleLogin\n    }\n}","import React from \"react\";\nimport { Text, StyleSheet, TextStyle, Dimensions } from \"react-native\";\nimport { colors } from \"../../styles\";\n\nconst screenWidth = Math.round(Dimensions.get(\"window\").width);\n\nconst styles = StyleSheet.create({\n    text: {\n        color: colors.white,\n        fontSize: screenWidth < 550 ? 21 : 16\n    }\n});\n\ninterface Itext {\n    customStyles?: { [S: string]: TextStyle };\n    ref?: any;\n}\n\nconst TextComp: React.FunctionComponent<Itext> = props => {\n    const { ref = null, customStyles } = props;\n    return (\n        <Text ref={ref} style={[styles.text, customStyles]}>\n            {props.children}\n        </Text>\n    );\n};\n\nexport default TextComp;\n","import React from \"react\";\nimport { TouchableOpacity, Text, StyleSheet, View, ViewStyle, TextStyle, GestureResponderEvent } from \"react-native\";\nimport { colors } from \"../../styles\";\nimport TextComp from \"./textComp\";\nimport { GestureHandlerGestureEvent } from \"react-native-gesture-handler\";\n\nconst styles = StyleSheet.create({\n    button: {\n        backgroundColor: colors.black,\n        height: \"100%\",\n        padding: 15,\n        borderBottomColor: colors.black,\n        borderBottomWidth: 2,\n    },\n    activeButton: {\n        backgroundColor: colors.black,\n        height: \"100%\",\n        padding: 15,\n        borderBottomColor: colors.red,\n        borderBottomWidth: 2,\n    },\n    buttonText: {\n        color: colors.white,\n        margin: \"auto\"\n    }\n});\n\ninterface Ibutton {\n    active?: boolean;\n    onPress?: (event: GestureResponderEvent) => void;\n    style?: { [S: string]: ViewStyle | TextStyle };\n}\n\nconst ButtonComp: React.FunctionComponent<Ibutton> = (props) => {\n    const { active = false, onPress = () => { }, style = styles } = props;\n\n    return (\n        <View>\n            <TouchableOpacity style={active ? style.activeButton : style.button} onPress={onPress}>\n                <TextComp customStyles={style.buttonText as { [S: string]: TextStyle }}>{props.children}</TextComp>\n            </TouchableOpacity>\n        </View>\n    )\n}\n\nexport default ButtonComp;","import React from \"react\";\nimport { View, Text, StyleSheet, TextStyle, ActivityIndicator } from \"react-native\";\nimport { colors } from \"../../styles\";\n\nconst styles = StyleSheet.create({\n    view: {\n        width: \"100%\",\n        marginTop: 100,\n        marginBottom: 0,\n        marginRight: \"auto\",\n        marginLeft: \"auto\"\n    }\n});\n\ntype Isize = \"small\" | \"large\";\n\ninterface Itext {\n    text?: string;\n    style?: { [S: string]: TextStyle };\n    size?: Isize;\n    color?: string;\n}\n\nconst Spinner: React.FunctionComponent<Itext> = (props) => {\n    const { style = styles, size = \"small\", text = \"Loading...\", color = colors.white } = props;\n    const textSize = size === \"small\" ? 12 : 42;\n    return (\n        <View style={style.view}>\n            <ActivityIndicator size={size} color={color} />\n            <Text style={{ color: colors.white, fontSize: textSize, textAlign: \"center\" }}>{text}</Text>\n        </View>\n    )\n}\n\nexport default Spinner;\n","import React from \"react\";\nimport { View, ScrollView, StyleSheet, Platform } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { Ilogin, IactivePage } from \"../service\";\nimport { colors, measurements } from \"../styles\";\nimport { ButtonComp } from \"./atoms\";\n\nconst headerHeight = measurements.mainHeaderHeight;\n\nconst styles = StyleSheet.create({\n  imageRow: {\n    height: headerHeight,\n    flexDirection: \"row\",\n    marginRight: 62\n  }\n});\n\ninterface Iheader {\n  page: string;\n  navigate: any;\n  reduxLogin: (Ilogin) => void;\n  reduxActivePage: (page: IactivePage) => void;\n  deviceInfo: { screenHeight: number; screenWidth: number };\n  useScrollView?: boolean;\n  isLoading?: boolean;\n}\n\nconst Header: React.FunctionComponent<Iheader> = props => {\n  const {\n    page,\n    navigate,\n    deviceInfo,\n    useScrollView = true,\n    isLoading = false\n  } = props;\n  const handleLogout = React.useCallback(() => {\n    props.reduxLogin({ ...{}, isLoggedIn: false });\n  }, []);\n  const handlePagePressDashboard = React.useCallback(() => {\n    props.reduxActivePage({ page: \"Dashboard\" });\n    navigate(\"Dashboard\", {});\n  }, []);\n  const handlePagePressMyaccount = React.useCallback(() => {\n    props.reduxActivePage({ page: \"MyAccount\" });\n    navigate(\"MyAccount\", {});\n  }, []);\n  const handlePagePressSupport = React.useCallback(() => {\n    navigate(\"support\", {});\n  }, []);\n  const handlePagePressNotes = React.useCallback(() => {\n    navigate(\"notes\", {});\n  }, []);\n  const handlePagePressTechsupport = React.useCallback(() => {\n    navigate(\"techsupport\", {});\n  }, []);\n\n  const scrollHeight =\n    Platform.OS === \"web\"\n      ? { height: deviceInfo.screenHeight - ( !isLoading ? headerHeight : 0 ) }\n      : { minHeight: deviceInfo.screenHeight - ( !isLoading ? headerHeight : 0 ) };\n\n  return (\n    <>\n      {!isLoading && (\n        <View\n          style={{\n            backgroundColor: colors.black,\n            display: \"flex\",\n            height: \"auto\",\n            width: \"100%\",\n            marginTop: Platform.OS === \"web\" ? 0 : 30\n          }}\n        >\n          <ScrollView\n            horizontal={true}\n            snapToStart={true}\n            showsHorizontalScrollIndicator={false}\n          >\n            <View style={styles.imageRow}>\n\n              <ButtonComp\n                onPress={handlePagePressDashboard}\n                active={page === \"Dashboard\"}\n              >\n                Dashboard\n              </ButtonComp>\n              <ButtonComp\n                onPress={handlePagePressMyaccount}\n                active={page === \"MyAccount\"}\n              >\n                My Account\n              </ButtonComp>\n              <ButtonComp\n                onPress={handlePagePressSupport}\n                active={page === \"support\"}\n              >\n                Support\n              </ButtonComp>\n              <ButtonComp onPress={handleLogout}>Logout</ButtonComp>\n              <ButtonComp\n                onPress={handlePagePressNotes}\n                active={page === \"notes\"}\n              >\n                Notes\n              </ButtonComp>\n              <ButtonComp\n                onPress={handlePagePressTechsupport}\n                active={page === \"techsupport\"}\n              >\n                Get Technical Support\n              </ButtonComp>\n            </View>\n          </ScrollView>\n        </View>\n      )}\n      {useScrollView ? (\n        <ScrollView\n          contentContainerStyle={{\n            backgroundColor: colors.black,\n            flexGrow: 1,\n            ...scrollHeight\n          }}\n        >\n          {props.children}\n        </ScrollView>\n      ) : (\n        <View\n          style={{\n            backgroundColor: colors.black,\n            flexGrow: 1,\n            ...scrollHeight\n          }}\n        >\n          {props.children}\n        </View>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = state => {\n  // console.log(\"state>>>\", state);\n  return {\n    loggedIn: state.authReducer,\n    deviceInfo: state.deviceInfo\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    reduxLogin: (payload: Ilogin) =>\n      dispatch({\n        type: \"LOGGED_IN\",\n        payload: payload\n      })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { View, Text } from \"react-native\";\nimport { Ilogin, IactivePage } from \"../service\";\nimport Header from \"../components/header\";\nimport { Spinner } from \"../components/atoms\";\nimport { colors } from '../styles';\n\ninterface Iprops {\n    navigation: any;\n    reduxActivePage: (page: IactivePage) => void;\n    loggedIn?: Partial<Ilogin>;\n}\n\nconst Dashboard = (props: Iprops) => {\n    const { navigate } = props.navigation;\n    const [loading, setLoading] = React.useState(false);\n\n    return (\n        <Header page=\"Dashboard\" navigate={navigate} reduxActivePage={props.reduxActivePage} isLoading={loading}>\n            {!loading &&\n                <View style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\", alignItems: \"stretch\", justifyContent: \"space-between\", backgroundColor: colors.darkGray }}>\n                    <Text>Dashboard</Text>\n                </View>\n            }\n            {\n                loading && <Spinner size={\"large\"} />\n            }\n        </Header>\n    );\n}\n\nDashboard.navigationOptions = {\n    headerMode: 'none',\n    navigationOptions: {\n        headerVisible: false,\n    },\n    headerStyle: { display: \"none\" }\n};\n\nconst mapStateToProps = (state) => {\n    // console.log('state>>>', state);\n    return {\n        loggedIn: state.authReducer\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        reduxActivePage: (payload: IactivePage) => dispatch({\n            type: 'ACTIVE_PAGE',\n            payload: payload,\n        })\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { Platform } from \"react-native\";\nimport { Ilogin, IactivePage } from \"../service\";\nimport Header from \"../components/header\";\nimport { TextComp } from \"../components/atoms\";\n\ninterface Iprops {\n    navigation: any;\n    reduxActivePage: (page: IactivePage) => void;\n    loggedIn?: Partial<Ilogin>;\n}\n\nconst MyAccount = (props: Iprops) => {\n    const { navigate } = props.navigation;\n\n    return (\n        <Header page=\"MyAccount\" navigate={navigate} reduxActivePage={props.reduxActivePage}>\n            <TextComp>My Account</TextComp>\n            <TextComp>{Platform.OS}</TextComp>\n        </Header>\n    );\n}\n\nMyAccount.navigationOptions = {\n    headerMode: 'none',\n    navigationOptions: {\n        headerVisible: false,\n    },\n    headerStyle: { display: \"none\" }\n};\n\nconst mapStateToProps = (state) => {\n    // console.log('state>>>', state);\n    return {\n        loggedIn: state.authReducer\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        reduxActivePage: (payload: IactivePage) => dispatch({\n            type: 'ACTIVE_PAGE',\n            payload: payload,\n        }),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyAccount);","import React, { useState } from 'react';\nimport { View, Dimensions, Platform } from 'react-native';\nimport { createAppContainer, NavigationActions } from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\nimport { Login, Dashboard, MyAccount } from \"./screens\";\nimport { Ilogin, Ideviceinfo } from \"./service\";\nimport { connect } from \"react-redux\";\nimport { colors } from './styles';\n\nconst MainNavigator: any = createStackNavigator({\n    Login: { screen: Login },\n    Dashboard: { screen: Dashboard },\n    MyAccount: { screen: MyAccount }\n});\n\nconst AppContainer = createAppContainer(MainNavigator);\n\nconst AppWrapper = (props: { loggedIn?: Partial<Ilogin>, reduxDeviceInfo: (Ideviceinfo) => void, activePage: { page: string } }) => {\n    const [route, setRout] = useState('Login');\n\n    const calcDeviceInfo = () => {\n        const screenWidth = Math.round(Dimensions.get('window').width);\n        const screenHeight = Math.round(Dimensions.get('window').height);\n        // console.log('file: src/index.tsx, function: window.addEventListener, screenWidth: ', screenWidth);\n        props.reduxDeviceInfo({\n            screenWidth,\n            screenHeight\n        });\n    }\n\n    React.useEffect(() => {\n        calcDeviceInfo();\n        Dimensions.addEventListener('change', () => {\n            calcDeviceInfo();\n        });\n    }, []);\n\n    React.useEffect(() => {\n        if (props && props.loggedIn && props.loggedIn.isLoggedIn) {\n            setRout(props.activePage.page || 'Dashboard');\n        } else {\n            setRout('Login');\n        }\n    }, [props.loggedIn, props.activePage]);\n\n    return (\n        <View style={{ display: \"flex\", flex: 1, height: \"100%\", backgroundColor: Platform.OS === 'web' ? colors.white : colors.black }}>\n            <AppContainer ref={nav => {\n                nav && nav.dispatch(\n                    NavigationActions.navigate({ routeName: route })\n                )\n            }} />\n        </View>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    // console.log('file: src/index.tsx, function: mapStateToProps, state: ', state);\n    return {\n        loggedIn: state.authReducer,\n        activePage: state.activePage\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        reduxDeviceInfo: (payload: Ideviceinfo) => dispatch({\n            type: 'DEVICE_INFO',\n            payload: payload,\n        }),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppWrapper);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/es/integration/react';\nimport { store, persistor } from './src/store/store';\nimport AppWrapper from \"./src\";\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <PersistGate\n                loading={null}\n                persistor={persistor}\n            >\n                <AppWrapper />\n            </PersistGate>\n        </Provider>\n    );\n}\n\nexport default App;\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.61a69445.png\";","import { Ilogin } from \"../service\";\n\nconst initialState:Partial<Ilogin> = {\n    isLoggedIn: false,\n};\n\nconst authReducer = (state = initialState, action: {type: string; payload: Ilogin}) => {\n    switch (action.type) {\n        case 'LOGGED_IN': {\n            return {\n                ...state,\n                ...action.payload,\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default authReducer;","import { Ideviceinfo } from \"../service\";\n\nconst initialState:Ideviceinfo = {\n    screenWidth: 0,\n    screenHeight: 0\n};\n\nconst deviceInfoReducer = (state = initialState, action: {type: string; payload: Ideviceinfo}) => {\n    switch (action.type) {\n        case 'DEVICE_INFO': {\n            // console.log('file: src/reducers/deviceInfo.ts, function: deviceInfoReducer, state: ', state);\n            return {\n                ...state,\n                ...action.payload,\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default deviceInfoReducer;","import { IactivePage } from \"../service\";\n\nconst initialState: IactivePage = {\n    page: \"Dashboard\"\n};\n\nconst activePageReducer = (state = initialState, action: {type: string; payload: IactivePage}) => {\n    switch (action.type) {\n        case 'ACTIVE_PAGE': {\n            return {\n                ...state,\n                ...action.payload,\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default activePageReducer;","import { combineReducers } from 'redux';\nimport authReducer from './Login';\nimport deviceInfo from './deviceInfo';\nimport activePage from './activePage';\n\nconst rootReducer = combineReducers({\n    authReducer,\n    deviceInfo,\n    activePage\n});\n\nexport default rootReducer;","import { AsyncStorage } from 'react-native';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport rootReducer from '../reducers/index';\n\nconst middleware = [thunk];\n\nif (process.env.NODE_ENV !== 'production') {\n    middleware.push(createLogger());\n}\n\nconst persistConfig = {\n    key: 'root',\n    storage: AsyncStorage,\n    whitelist: [\n        'authReducer',\n    ]\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst store = createStore(\n    persistedReducer,\n    applyMiddleware(...middleware),\n);\n\nlet persistor = persistStore(store);\n\nexport {\n    store,\n    persistor,\n};"],"sourceRoot":""}